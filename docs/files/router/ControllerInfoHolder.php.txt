<?PHP
/**
 * Project:       Hymie PHP MVC framework
 * File:          ControllerInfoHolder.php
 * Created Date:  2019-08-11
 *
 * Github:        https://github.com/mahaixing/hymie-mvc
 * Gitee:         https://gitee.com/mahaixing/hymie-mvc
 * Composer:      https://packagist.org/packages/hymie/mvc
 *
 * @author:       mahaixing(mahaixing@gmail.com)
 * @license:      Apache License 2.0 (http://www.apache.org/licenses/LICENSE-2.0)
 */

namespace hymie\router;

/**
 * 保存路由表信息，路由表信息保存在缓存中
 */
class ControllerInfoHolder
{
    const ROUTE_FILE = 'config.router.php';
    private $cache;
    private $cacheKey = 'controller_info_holder.';
    private $routers;

    /**
     * 构造函数，检查缓存中是否有路由表，如有则使用否重新构造。
     *
     * @param array $modules
     */
    public function __construct($modules)
    {
        $this->cache = \hymie\cache\Cache::getInstance();
        $this->cacheKey .= implode(".", $modules);

        if (!$this->cache->has($this->cacheKey)) {
            $this->addRouters($modules);
        } else {
            $this->routers = $this->cache->get($this->cacheKey);
        }

        register_shutdown_function(array($this, 'sortRouters'));
    }

    /**
     * 增加路由配置，并将路由表添加到缓存
     *
     * @param [type] $modules
     * @return void
     */
    public function addRouters($modules)
    {
        $this->routers = [];
        foreach ($modules as $module) {
            $routerFile = APP_ROOT . DIRECTORY_SEPARATOR . $module . DIRECTORY_SEPARATOR . self::ROUTE_FILE;

            if (!file_exists($routerFile)) {
                continue;
            }
            $moduleRoutes = require $routerFile;
            if (!is_array($moduleRoutes) || count($moduleRoutes) == 0) {
                continue;
            }

            foreach ($moduleRoutes as $pathRegex => $controllerDef) {
                $this->routers[$pathRegex] = [0, ['module' => $module, 'controllerDef' => $controllerDef]];
            }
        }

        $this->cache->set($this->cacheKey, $this->routers);
    }

    /**
     * 根据路径获取匹配的控制器定义
     *
     * @param string $path
     * @return array [matchs, moduleControllerDef]
     */
    public function getControllerInfo($path)
    {
        if (is_null($this->routers) || !is_array($this->routers)) {
            log_debug(sprintf("%s: router definition does not exist", self::class));
            return null;
        }

        log_debug(sprintf("%s: start to test path '%s', use router definitions.", self::class, $path));
        foreach ($this->routers as $urlRegex => &$routerInfo) {
            $pattern = sprintf('#^%s\/?\Z#i', $urlRegex);
            if (preg_match($pattern, $path, $matches) > 0) {
                log_debug(sprintf("%s: router '%s' accept path '%s'", self::class, $urlRegex, $path), $matches);
                //请求计数加 1
                $routerInfo[0] = $routerInfo[0] + 1;
                // 放到 shutdown_function 里面做，单元测试应该看不到效果，需要用页面请求来测
                // arsort($this->routers);
                // $this->cache->set($this->cacheKey, $this->routers);
                //路由定义
                $moduleControllerDef = $routerInfo[1];
                // 这里要获取分组参数，所以，先把数组第一个去掉。数组第一条匹配的是 path
                array_shift($matches);
                return [$matches, $moduleControllerDef];
            }
        }
        log_debug(sprintf("%s: '%s' does not match any router definition.", self::class, $path));
        return null;
    }

    /**
     * 注册 shutdown 方法，对缓存中的路由根据访问次数进行排序。
     *
     * @return void
     */
    public function sortRouters()
    {
        if ($this->routers != null && is_array($this->routers)) {
            arsort($this->routers);
            $this->cache->set($this->cacheKey, $this->routers);
        }
    }
}

