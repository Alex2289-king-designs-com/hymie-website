<?PHP
/**
 * Project:       Hymie PHP MVC framework
 * File:          ArrayCache.php
 * Created Date:  2019-08-11
 *
 * Github:        https://github.com/mahaixing/hymie-mvc
 * Gitee:         https://gitee.com/mahaixing/hymie-mvc
 * Composer:      https://packagist.org/packages/hymie/mvc
 *
 * @author:       mahaixing(mahaixing@gmail.com)
 * @license:      Apache License 2.0 (http://www.apache.org/licenses/LICENSE-2.0)
 */

namespace hymie\cache;

use Psr\SimpleCache\CacheInterface;

/**
 * 简单的符合 psr-16 标准的数组缓存实现。
 *
 * 数组结构为：
 * [key] => ['value' => value, 'expire'=>['ttl'=> ttl, expire_at => expire-at];
 *
 * 缓存 ttl 以秒为单位。
 */
class ArrayCache implements CacheInterface
{

    /**
     * 缓存容器数组
     *
     * @var array
     */
    private $pool;

    /**
     * 到期时间键
     */
    const EXPIRE_KEY = 'expire';

    /**
     * time to live 键
     */
    const TTL_KEY = 'ttl';

    /**
     * 失效时间
     */
    const EXPIRE_AT_KEY = 'expire_at';

    /**
     * 数据键
     */
    const VALUE_KEY = 'value';

    /**
     * 构造函数
     */
    public function __construct()
    {
        $this->pool = array();
    }

    /**
     * 检查键是否为字符串并且不是空字符串
     *
     * @param mix $key
     * @return boolean 
     */
    private function stringKey($key)
    {
        if (!is_string($key)) {
            throw new InvalidArgumentException(sprintf("Caches key must be string, '%s' -> '%s' given", $key, typeof($key)));
        }

        if (empty($key)) {
            throw new InvalidArgumentException("Caches key must be a not empty string.");
        }

        return $key;
    }

    /**
     * 获取缓存值，如果键不存在则返回 $default 值
     *
     * @param string $key
     * @param mixed $default 
     * @return mixed
     */
    private function getValue($key, $default)
    {
        if (!array_key_exists($key, $this->pool)) {
            return $default;
        }

        $item = &$this->pool[$key];
        $expire = &$item[self::EXPIRE_KEY];
        $value = null;
        $now = time();
        if ($expire[self::TTL_KEY] == null) {
            $expire[self::EXPIRE_AT_KEY] = $now;
            $value = $item[self::VALUE_KEY];
        } elseif (($expire[self::EXPIRE_AT_KEY] + $expire[self::TTL_KEY]) >= $now) {
            $expire[self::EXPIRE_AT_KEY] += $expire[self::TTL_KEY];
            $value = $item[self::VALUE_KEY];
        } else {
            $value = $default;
        }

        return $value;
    }

    /**
     * 创建缓存数组项
     *
     * @param mixed $value
     * @param time $ttl
     * @return array
     */
    private function createItem($value, $ttl)
    {
        return array(
            self::VALUE_KEY => $value,
            self::EXPIRE_KEY => [
                self::TTL_KEY => $ttl,
                self::EXPIRE_AT_KEY => time(),
            ],
        );
    }

    /**
     * {@inheritdoc}
     */
    public function get($key, $default = null)
    {
        $key = $this->stringKey($key);
        return $this->getValue($key, $default);
    }

    /**
     * {@inheritdoc}
     */
    public function set($key, $value, $ttl = null)
    {
        $key = $this->stringKey($key);
        $this->pool[$key] = $this->createItem($value, $ttl);
    }

    /**
     * {@inheritdoc}
     */
    public function delete($key)
    {
        $key = $this->stringKey($key);
        if (!array_key_exists($key, $this->pool)) {
            return true;
        }

        unset($this->pool[$key]);
        return true;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->pool = array();
    }

    /**
     * {@inheritdoc}
     */
    public function getMultiple($keys, $default = null)
    {
        if (!is_array($keys) && !$keys instanceof \Traversable) {
            throw new InvalidArgumentException(sprintf('Cache values must be array or Traversable, "%s" given', \is_object($values) ? \get_class($values) : \gettype($values)));
        }

        $values = [];
        foreach ($keys as $key) {
            $key = $this->stringKey($key);
            $values[$key] = $this->getValue($key, $default);
        }

        return $values;
    }

    /**
     * {@inheritdoc}
     */
    public function setMultiple($values, $ttl = null)
    {
        if (!is_array($values) && !$values instanceof \Traversable) {
            throw new InvalidArgumentException(
                sprintf('Cache values must be array or Traversable, "%s" given',
                    is_object($values) ? get_class($values) : gettype($values)
                )
            );
        }

        foreach ($values as $key => $value) {
            $this->set($key, $value, $ttl);
        }

        return true;
    }

    /**
     * {@inheritdoc}
     */
    public function deleteMultiple($keys)
    {
        if (!is_array($keys) && !$keys instanceof \Traversable) {
            throw new InvalidArgumentException(
                sprintf('Cache keys must be array or Traversable, "%s" given',
                    is_object($keys) ? get_class($keys) : gettype($keys)
                )
            );
        }

        foreach ($keys as $key) {
            $this->delete($key);
        }
    }

    /**
     * {@inheritdoc}
     */
    public function has($key)
    {
        $key = $this->stringKey($key);
        return array_key_exists($key, $this->pool);
    }
}

